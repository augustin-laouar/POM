#!/bin/sh
# Copyright (C) 2006 OpenWrt.org

. /lib/functions.sh
. /lib/wifi/acl.sh

usage() {
	cat <<EOF
Usage: $0 [down|detect]
enables (default), disables or detects a wifi configuration.
EOF
	exit 1
}

find_net_config() {(
	local vif="$1"
	local cfg
	local ifname

	config_get cfg "$vif" network

	[ -z "$cfg" ] && {
		include /lib/network
		scan_interfaces

		config_get ifname "$vif" ifname

		cfg="$(find_config "$ifname")"
	}
	[ -z "$cfg" ] && return 0
	echo "$cfg"
)}


bridge_interface() {(
	local cfg="$1"
	[ -z "$cfg" ] && return 0

	include /lib/network
	scan_interfaces

	for cfg in $cfg; do
		config_get iftype "$cfg" type
		[ "$iftype" = bridge ] && config_get "$cfg" ifname
		prepare_interface_bridge "$cfg"
		return $?
	done
)}

prepare_key_wep() {
	local key="$1"
	local hex=1

	echo -n "$key" | grep -qE "[^a-fA-F0-9]" && hex=0
	[ "${#key}" -eq 10 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 26 -a $hex -eq 1 ] || {
		[ "${key:0:2}" = "s:" ] && key="${key#s:}"
        	key="$(echo -n "$key" | hexdump -ve '1/1 "%02x" ""')"
	}
	echo "$key"
}

wifi_fixup_hwmode() {
	local device="$1"
	local default="$2"
	local hwmode hwmode_11n

	config_get channel "$device" channel
	config_get hwmode "$device" hwmode
	case "$hwmode" in
		11bg) hwmode=bg;;
		11a) hwmode=a;;
		11b) hwmode=b;;
		11g) hwmode=g;;
		11n*)
			hwmode_11n="${hwmode##11n}"
			case "$hwmode_11n" in
				a|g) ;;
				default) hwmode_11n="$default"
			esac
			config_set "$device" hwmode_11n "$hwmode_11n"
		;;
		*)
			hwmode=
			if [ "${channel:-0}" -gt 0 ]; then 
				if [ "${channel:-0}" -gt 14 ]; then
					hwmode=a
				else
					hwmode=g
				fi
			else
				hwmode="$default"
			fi
		;;
	esac
	config_set "$device" hwmode "$hwmode"
}

wifi_updown() {
	[ enable = "$1" ] && {
		#wifi_updown disable "$2"
		scan_wifi
	}

	# begin: added by YangDi
	# wifi first start, every vap will be configured
	# freq0/freq1 make sure 2g/5g will not be interact each other.
	[ "0" == "$WIFI_FIRST_START" ] && { \
		config_get ap2g freq0 freqenable
		config_get ap5g freq1 freqenable
		config_get wds2g freq0 wdsenable
		config_get wds5g freq1 wdsenable
		
		# only config wifi1, added by YangDi.
		[ "0" == "$ap2g" -a "0" == "$wds2g" ] && DEVICES=${DEVICES//wifi0/}
		# only config wifi0, added by YangDi.
		[ "0" == "$ap5g" -a "0" == "$wds5g" ] && DEVICES=${DEVICES//wifi1/}
	}
	# end: added by YangDi

	for device in ${2:-$DEVICES}; do (
		config_get iftype "$device" type
		if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
			eval "scan_$iftype '$device'"
			eval "${1}_$iftype '$device'" || echo "$device($iftype): ${1} failed"
		else
			echo "$device($iftype): Interface type not supported"
		fi
	); done
	
	# begin: added by xiesimin
	[ enable = "$1" ] && {
		wifi_restore_acl
	}
	# end: added by xiesimin
}

wifi_detect() {
	for driver in ${2:-$DRIVERS}; do (
		if eval "type detect_$driver" 2>/dev/null >/dev/null; then
			eval "detect_$driver" || echo "$driver: Detect failed" >&2
		else
			echo "$driver: Hardware detection not supported" >&2
		fi
	); done
}

start_net() {(
	local iface="$1"
	local config="$2"
	local vifmac="$3"

	[ -f "/var/run/$iface.pid" ] && kill "$(cat /var/run/${iface}.pid)" 2>/dev/null
	[ -z "$config" ] || {
		include /lib/network
		scan_interfaces
		for config in $config; do
			setup_interface "$iface" "$config" "" "$vifmac"
		done
	}
)}

set_wifi_up() {
	local cfg="$1"
	local ifname="$2"
	uci_set_state wireless "$cfg" up 1
	uci_set_state wireless "$cfg" ifname "$ifname"
}

set_wifi_down() {
	local cfg="$1"
	local vifs vif vifstr

	[ -f "/var/run/wifi-${cfg}.pid" ] &&
		kill "$(cat "/var/run/wifi-${cfg}.pid")" 2>/dev/null
	uci_revert_state wireless "$cfg"
	config_get vifs "$cfg" vifs
	for vif in $vifs; do
		uci_revert_state wireless "$vif"
	done
}

scan_wifi() {
	local cfgfile="$1"
	DEVICES=
	IFACES=
	config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
				config_set "$section" vifs ""
				config_set "$section" ht_capab ""
			;;
		esac

		# section end
		config_get TYPE "$CONFIG_SECTION" TYPE
		case "$TYPE" in
			wifi-iface)
				append IFACES "$CONFIG_SECTION"
				config_get device "$CONFIG_SECTION" device
				config_get vifs "$device" vifs 
				append vifs "$CONFIG_SECTION"
				config_set "$device" vifs "$vifs"
			;;
		esac
	}
	option_cb() {
		local option_name="$1"
		local option_val="$2"
		local section_name="$CONFIG_SECTION"
		
		case "$option_name" in 
			encrypt)
				[ "$option_val" == 0 ] && option_val="none"
				[ "$option_val" == 1 ] && option_val="psk-mixed/aes"
				config_set "$section_name" encryption "$option_val"
				;;
			enable)
				local val
				[ "$option_val" == 1 ] && val=0
				[ "$option_val" == 0 ] && val=1
				config_set "$section_name" disabled "$val"
				;;
			depend|disabled)
				local disabled
				local depend
				config_get disabled "$section_name" disabled
				config_get depend "$section_name" depend
				[ -n "$disabled" -a -n "$depend" ] && { \
					config_get depend_disabled "$depend" disabled 0
					[ "$disabled" == "0" -a "$depend_disabled" == "1" ] && { \
						local NO_CALLBACK_OLD="$NO_CALLBACK"
						NO_CALLBACK=1
						config_set "$section_name" disabled 1
						NO_CALLBACK="$NO_CALLBACK_OLD"
					}
				}
				;;
		esac
	}
	config_load "${cfgfile:-wireless}"
}

# begin: added by xiesimin
add_device_to_acl() {
	config_get is_blocked "$1" is_blocked
	config_get mac "$1" mac

	[ 1 = "$is_blocked" ] && {
		for iface in ${2:-$IFACES}; do (
			append_to_acl $iface $mac
		); done
	}
}

wifi_restore_acl() {
	for iface in ${2:-$IFACES}; do (
		acl_reset $iface
	); done

	config_load hosts_info

	config_foreach add_device_to_acl device
}
# end: added by xiesimin

# begin: added by suqiang
wifi_radio_detect() {
	local device=${DEVICES/ */}
	local iftype=
	config_get iftype $device type
	case $iftype in
	qcawifi) slp_art_start;;
	mt*);;
	*);;
	esac
}
# end: added by suqiang

DEVICES=
IFACES=
DRIVERS=
include /lib/wifi
scan_wifi

case "$1" in
	down) wifi_updown "disable" "$2";;
	detect) wifi_detect "$2";;
	--help|help) usage;;
	reload_wifi) slp_reload_wifi;;
	cal_check) wifi_radio_detect;;
	*) wifi_updown "enable" "$2";;
esac
