#!/bin/sh /etc/rc.common
# Copyright (C) 2010 Jo-Philipp Wich

START=50

SERVICE_DAEMONIZE=1
SERVICE_WRITE_PID=1

UHTTPD_BIN="/usr/sbin/uhttpd"
PX5G_BIN="/usr/sbin/px5g"
OPENSSL_BIN="/usr/bin/openssl"

append_arg() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && append UHTTPD_ARGS "$opt ${val:-$def}"
}

append_bool() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get_bool val "$cfg" "$var" "$def"
	[ "$val" = 1 ] && append UHTTPD_ARGS "$opt"
}

generate_keys() {
	local cfg="$1"
	local key="$2"
	local crt="$3"
	local days bits country state location commonname

	config_get days       "$cfg" days
	config_get bits       "$cfg" bits
	config_get country    "$cfg" country
	config_get state      "$cfg" state
	config_get location   "$cfg" location
	config_get commonname "$cfg" commonname

	bits=2048
	echo "generate key: ${days}days ${bits}bits"
	if [ -x "$OPENSSL_BIN" ]; then
		# generate key and cert with openssl
		$OPENSSL_BIN genrsa -out "${UHTTPD_KEY}.new" ${bits:-2048} >/dev/null 2>&1
		$OPENSSL_BIN req -new -key "${UHTTPD_KEY}.new" -out "${UHTTPD_CERT}.tmp" \
		    -subj /C="${country:-CN}"/CN="${commonname:-tplinkwifi.net}" >/dev/null 2>&1
		$OPENSSL_BIN x509 -req -days ${days:-1825} -in "${UHTTPD_CERT}.tmp" -signkey "${UHTTPD_KEY}.new" -out "${UHTTPD_CERT}.new" >/dev/null 2>&1

		mv "${UHTTPD_KEY}.new" "${UHTTPD_KEY}"
		mv "${UHTTPD_CERT}.new" "${UHTTPD_CERT}"
		rm "${UHTTPD_CERT}.tmp"
	elif [ -x "$PX5G_BIN" ]; then
		$PX5G_BIN selfsigned -der \
			-days ${days:-730} -newkey rsa:${bits:-1024} -keyout "${UHTTPD_KEY}.new" -out "${UHTTPD_CERT}.new" \
			-subj /C="${country:-DE}"/ST="${state:-Saxony}"/L="${location:-Leipzig}"/CN="${commonname:-OpenWrt}"
		sync
		mv "${UHTTPD_KEY}.new" "${UHTTPD_KEY}"
		mv "${UHTTPD_CERT}.new" "${UHTTPD_CERT}"
	fi
}

start_instance()
{
	UHTTPD_ARGS=""
	UHTTPD_CERT=""
	UHTTPD_KEY=""

	local cfg="$1"
	local realm="$(uci_get device_info.info.device_model)"
	local listen http https interpreter indexes path
	
	append_arg "$cfg" home "-h"
	append_arg "$cfg" config "-c"
	append_arg "$cfg" network_timeout "-T"
	append_arg "$cfg" tcp_keepalive "-A"
	append_arg "$cfg" error_page "-E"
	append_arg "$cfg" max_requests "-n" 3

	append_bool "$cfg" no_symlinks "-S" 0
	append_bool "$cfg" no_dirlists "-D" 0
	append_bool "$cfg" rfc1918_filter "-R" 0

	append UHTTPD_ARGS "-r $realm"
	
	config_get http "$cfg" listen_http
	for listen in $http; do
		append UHTTPD_ARGS "-p $listen"
	done

	config_get interpreter "$cfg" interpreter
	for path in $interpreter; do
		append UHTTPD_ARGS "-i $path"
	done

	config_get indexes "$cfg" index_page
	for path in $indexes; do
		append UHTTPD_ARGS "-I $path"
	done

	config_get https "$cfg" listen_https
	config_get UHTTPD_KEY  "$cfg" key  /etc/uhttpd.key
	config_get UHTTPD_CERT "$cfg" cert /etc/uhttpd.crt

	[ -n "$https" ] && {
		[ -f "$UHTTPD_CERT" -a -f "$UHTTPD_KEY" ] || {
			config_foreach generate_keys cert
		}

		[ -f "$UHTTPD_CERT" -a -f "$UHTTPD_KEY" ] && {
			append_arg "$cfg" cert "-C"
			append_arg "$cfg" key  "-K"

			for listen in $https; do
				append UHTTPD_ARGS "-s $listen"
			done
		}
	}

	SERVICE_PID_FILE=/var/run/uhttpd_${cfg}.pid
	service_start $UHTTPD_BIN -f $UHTTPD_ARGS

	# Check if daemon is running, if not then
	# re-execute in foreground to display error.
	(sleep 1 && service_check $UHTTPD_BIN || \
		$UHTTPD_BIN -f $UHTTPD_ARGS) &
}

stop_instance()
{
	local cfg="$1"

	SERVICE_PID_FILE=/var/run/uhttpd_${cfg}.pid
	service_stop $UHTTPD_BIN
}

start() {
	config_load uhttpd
	config_foreach start_instance uhttpd
}

stop() {
	config_load uhttpd
	config_foreach stop_instance uhttpd
	unset CONFIG_main_listen_http_wan
}
